KinematikJava is a lightweight Java library for 6-axis manipulator kinematics. It includes:
1. Translations between three different representations of frame (coordinate system): XYZABC (coordinates and Euler angles), homogenous matrix, and axes (x-axis and a point on XY plane).
2. Frame attachment and inverse
3. Forward kinematics
4. Inverse kinematics
The library is valid for most industrial 6-axis robots. It is tested on Kuka robots. The Denavit–Hartenberg parameters, the convention of Euler angles, and the shifts on the joint angles may vary with robot manufacturers. 

Example 1: calculate ABC (Euler angles) from two axes
//define a frame by 3-point :
double[] po={804.10, -200.93, 339.07};//origin
double[] px={880.12, 38.14,   393.51};//a point on positive X-Axis
double[] py={666.4,  -43.35,   299.83};//a point on XY plane (with positive y)
//calculate Euler angles:
double[] ABC=Robot.ABCby3Point(LA.sub(px, po), LA.sub(py, po)); 


Example 2: Frame attachment and the inverse
//multiple two frames (coordinate systems)
//the position of the flange
double[][] flange= Robot.matrix(898.094, -1265.699, 245.752, 161.956, -11, 22);  
//the geometry of end-effector
double[][] tool = Robot.matrix(-54.707, -59.723, 77.7, -11, 22, -33);  
//frame attachment, resulting the frame of the end-effector:
double[][] result=Robot.mul34(flange, tool);  //flange*tool=result

//inverse calculation      flange=result/tool;
double[][] inv_tool=Robot.inverse34(tool);
flange=Robot.mul34(result, inv_tool);

Example 3: Inverse Kinematics
//set Denavit–Hartenberg parameters, check the geometry of your robot
double[] a = { 260, 680, -35, 0, 0, 0};  //here are the parameters of KUKA KR16  
double[] d = { 675, 0, 0, 670, 0, 158}; 
Robot kr=new Robot(a, d);
//set tool by XYZABC (coordinates and Euler angles):
double[][] tool = Robot.matrix(-54.707, -59.723, 77.7, -11, 22, -33);  
double[][] base = Robot.matrix(898.094, -1265.699, 245.752, 161.956, -11, 22);  
//coordinates and Euler angles:

double[] XYZABC = { 97.16, -161.65, 577.30, -7.7, 6.19, 168.76 };     
//calculate A1-A6, joint angles
double[] degs = kr.inverse(XYZABC, new Double(0), base, tool);    



by Hao Hua
Institute of Architectural Algorithm & Application, Nanjing
http://www.labaaa.org/kinematikjava
http://www.whitegreen.org/kinematikjava
